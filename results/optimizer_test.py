# -*- coding: utf-8 -*-

import optimizer
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
import interpolator

plt.close('all')

bg_day = 429518
bg_night = 8590

ra = 0.05e6 # pulse rate
jitter = 364e-12 # total time jitter
e_d = 0.05 # detector QBER
time_filter = 2 # 2 sigma time filter on the coincidence window

detector_loss = 5 
time = 1 # total time of prototocol

file_day = 'data/HORIZONTAL_DISTANCE_DAY2_trx=15_L=%i_wl=0.81'
file_night = 'data/HORIZONTAL_DISTANCE_NIGHT2_trx=15_L=%i_wl=0.81'


# Day or night settings
bg_rate = bg_day # background rate
file_data = file_day


confidence = 0.99

channel = {
    'ra': ra,
    'channel_loss': 0,
    'detector_loss': detector_loss,
    'bg_rate': bg_rate,
    'jitter': jitter,
    'time_filter': time_filter,
    'time': time, 
    'e_d': e_d,
    'confidence': confidence}



qs = []
ss = []

qs_ES = []
ss_ES = []

# ds = [7000, 8000, 9000, 10000, 11000, 13000, 15000, 18000, 22000, 26000, 30000]
ds = [8000]

for di in ds:
    # d = 10000
    d = di
    
    data = sp.io.loadmat(file_data %d)
    
    scattering_loss = 0.45 # db/km for 810
    data = data['res'].transpose()[0]
    data = -10*np.log10(data)+scattering_loss*d*1e-3
    
    
    print()
    print()
    print('----------------> d = ', d)
    print('channel loss mean: ',np.mean(data))
    
    
    Nbins = 60
    interpol = interpolator.Interpolator(data, Nbins, plot=False)
    
    channel['channel_loss'] = interpol.get_sampler()
    
    opt = optimizer.Optimizer(channel)
    
    
    
    m = 0.5 # signal mean photon number
    v = 0.1 # decoy mean photon number  - required v < m
    pm = 0.1
    x = [m, v, pm] 
    
    
    
    
    # print(opt.theoretical_vals_decoy([0.5, 0.1, 0.8], confidence))
    # print(opt.theoretical_vals_decoy([0.5, 0.3, 0.8], confidence))
    # print(opt.theoretical_vals_decoy([0.5, 0.05, 0.8], confidence))
    # print(opt.theoretical_vals_decoy([ 4.106e-01,  4.337e-02,  3.482e-02], confidence))
     # probability of sigal produced
    
    
    res= opt.optimize(x)
    
    print(res)
    
    xo = res['x']
    
    
    
    finite = True
    
    Qm, Qv, Y1, Y0, q_ests = opt.theoretical_vals_decoy(xo, finite)
    
    print('------------')
    print('---> d = ', d)
    print('total loss mean: ', -10*np.log10(opt.channel_mean_decoy()))
    print('x: ', xo)
    print('      -        ')
    
    Nm = ra*time*Qm*xo[2]
    Nv = ra*time*Qv*(1-xo[2])
    print('Nm: ', Nm)
    print('Nv: ', Nv)
    print('N total: ', Nm + Nv)

    b1 = ((Qm*np.exp(xo[0])-Y0)/(2*xo[0]) < Y1)
    b2 = ((Qv*np.exp(xo[1])-Y0)/(2*xo[1]) < Y1)
    
    print('Y1: ', Y1)
    print('m safe: ', b1)
    print('v safe: ', b2)
    
    print('qs: ', q_ests)
    
    print('---- P_fail')
    print(opt.prob_fail_decoy(Qm, Qv, xo))
    
    
    s2 = b1 * Nm + b2 * Nv 
    q2 = q_ests[1]
    
    ss += [s2]
    qs += [q2]
    
    print('----------- Second optimization')
    
    emin = q_ests[1]
    ecap = 0.03
    
    # xo = np.array([1.1, 1.1, 1.1]) * xo
    xo = xo
    res= opt.optimize2(xo, emin, ecap)
    
    print(res)
    
    xo2 = res['x']
    
    
    Qm, Qv, Y1, Y0, q_ests = opt.theoretical_vals_decoy(xo2, finite)
    
    print('------------')
    print('---> d = ', d)
    print('total loss mean: ', -10*np.log10(opt.channel_mean_decoy()))
    print('x: ', xo2)
    print('      -        ')
    
    Nm = ra*time*Qm*xo2[2]
    Nv = ra*time*Qv*(1-xo2[2])
    print('Nm: ', Nm)
    print('Nv: ', Nv)
    print('N total: ', Nm + Nv)

    b1 = ((Qm*np.exp(xo2[0])-Y0)/(2*xo2[0]) < Y1)
    b2 = ((Qv*np.exp(xo2[1])-Y0)/(2*xo2[1]) < Y1)
    
    print('Y1: ', Y1)
    print('m safe: ', b1)
    print('v safe: ', b2)
    
    print('qs: ', q_ests)
    
    print('---- P_fail')
    print(opt.prob_fail_decoy(Qm, Qv, xo2))
    
    
    s = b1 * Nm + b2 * Nv 
    q = q_ests[1]
    
    ss += [s]
    qs += [q]
    
    print('------ ES')
    print('ES total loss mean: ', -10*np.log10(opt.channel_mean_ES()))
    
    s_ES, q_ES = opt.values_ES()
    
    print('signal: ', s_ES)
    print('QBER: ', q_ES)
    
    ss_ES += [s_ES]
    qs_ES += [q_ES]
    print('------------------------------------------')
    
    print(d)
    print(xo)
    print(s2)
    print(q2)
    
    # print(xo2)
    # print(s)
    # print(q)
    print('')
    # print(ss_ES)
    # print(qs_ES)

print(ss)
print(qs)

# print('-------------- Sample values -----------------')
# prints([0.5, 0.1, 0.9])
# prints([0.4, 0.1, 0.4])
# prints([0.5, 0.1, 0.4])
# prints([0.6, 0.1, 0.4])
# prints([0.7, 0.1, 0.4])
# prints([0.8, 0.1, 0.4])

####################### 20 Mhz source rate - night
s= '''
---------------------------- Day
7000
[0.62645457 0.20354933 0.23091698]
40775.99999999999
0.10861316665935314
[0.62881964 0.29409205 0.1745963 ]
63881.0
0.12796939867251

[86597.03722735579]
[0.06915738289534498]


8000
[0.6924108  0.2340948  0.24217368]
30001.999999999996
0.13527397011225448
[0.6924108  0.2340948  0.24217368]
29484.999999999996
0.13596651894229828

[56201.03722735579]
[0.07889067658262633]


9000
[0.76393693 0.26804331 0.2538816 ]
0.0
0.1964932025072522
[0.76393693 0.26804331 0.2538816 ]
0.0
0.19460633552993534

[37060.03722735579]
[0.09310928117224665]

-------- 400 MHz
7000
[0.49401976 0.2416243  0.28737632]
904996.9999999999
0.09218361140366231
[0.47395373 0.36786443 0.21282454]
1520276.0
0.1177132564505233

[1729071.7445471156]
[0.06702442810182883]


8000
[0.55323306 0.27806812 0.29600406]
656263.0
0.11111635885409107
[0.49951455 0.32420164 0.20867498]
862188.0
0.12378985421042035

[1124843.7445471156]
[0.07602990201848994]


--------------------------- Night

7000
[0.38134134 0.099999   0.1801362 ]
[197700.0]
[0.06313866076690193]
[0.64694478 0.36201091 0.10126374]
[423748.00000000006]
[0.09516073363325939]

[416336.02074454713]
[0.05118009017343048]


8000
[0.39295022 0.099999   0.1769483 ]
[162363.0]
[0.06387129805733535]
[0.38668658 0.29887302 0.32830844]
[348495.0]
[0.08760102542260965]

[340391.02074454713]
[0.051313270899904576]


9000
[0.40729124 0.099999   0.17331109]
[129118.0]
[0.0646152987592407]
[0.4028639  0.29863576 0.32504716]
[279291.0]
[0.09311974749320902]

[267397.02074454713]
[0.05149407167592479]

10000
[0.42298411 0.099999   0.16947437]
[101957.0]
[0.06566740134512983]
[0.42050726 0.29853819 0.32138242]
[222108.0]
[0.09169038762829526]

[210614.0207445471]
[0.05169904436524659]


11000
[0.44152661 0.099999   0.16547349]
[80511.0]
[0.06722258393842004]
[0.44115336 0.29867622 0.31722072]
[103267.00000000001]
[0.09936183008831027]

[161914.0207445471]
[0.05196004911790654]


13000
[0.48146971 0.099999   0.1572392 ]
[48195.0]
[0.07156472748913009]
[0.4853204  0.29957401 0.30775493]
[62758.99999999999]
[0.09636322513979943]

[95789.02074454712]
[0.05261929406354109]


15000
[0.52721365 0.099999   0.14934754]
[29234.0]
[0.07677272411062878]
[0.53502943 0.30148378 0.29714064]
[38051.0]
[0.10289416189532492]

[56911.02074454712]
[0.05351810716224116]


18000
[0.60233669 0.099999   0.13903338]
[7302.999999999999]
[0.08767126887439598]
[0.96626659 0.099999   0.001     ]
[8400.000000000002]
[0.11309140718907962]

[26828.020744547117]
[0.05547831154430422]


22000
[0.72185764 0.10441733 0.13211211]
[2817.0]
[0.1249208923240304]
[0.78312745 0.21029338 0.08279007]
[6048.0]
[0.1301853808998477]

[10031.020744547115]
[0.060175014667356495]


------------------------- 400 MHz 
7000
[0.24214757 0.099999   0.2400409 ]
3516922.0
0.05746864597228644
[0.46097541 0.42534502 0.29678441]
7774613.0
0.0979335669151411


8000
[0.24865276 0.099999   0.23597107]
2888315.0
0.05781978947123596
[0.46772561 0.42285032 0.29277591]
9245584.0
0.09474495429349748


9000
[0.25669493 0.099999   0.23118878]
2299482.0
0.05807104352598059
[0.48374613 0.41785931 0.31357169]
7355002.999999999
0.0945625467540479


10000
[0.26581422 0.099999   0.22629492]
1818229.9999999998
0.0584705557380394
[0.57916381 0.41849087 0.02899124]
5350911.000000001
0.09988479263938063


11000
[0.27621031 0.099999   0.22069479]
1415230.0
0.058875382928022996
[0.39025026 0.36272913 0.27609677]
3767015.0
0.09564915104301581


13000
[0.30053078 0.099999   0.20958646]
860970.0
0.05963719447968792
[0.59157496 0.40325698 0.03343033]
2358578.0
0.10177994595341083


15000
[0.32858839 0.099999   0.19836435]
523590.0
0.06095759934178973
[0.60411684 0.39397289 0.03681861]
1364198.0
0.1002652634842314


18000
[0.37865957 0.099999   0.18111191]
256304.99999999994
0.06372925712874386
[0.47449868 0.33081009 0.36108445]
649559.0
0.09089847989669451


22000
[0.46730067 0.10960055 0.17081262]
107194.0
0.07090530037138869
[0.47012599 0.267681   0.27279154]
203513.0
0.08897027204733836


26000
[0.5708741  0.14627822 0.19080875]
29642.000000000004
0.08701754098991726
[0.58610759 0.31798272 0.1585563 ]
67035.00000000001
0.11454527738024407



30000
[0.68590405 0.19186346 0.2124562 ]
15954.0
0.12304210117536005
[0.6886437  0.24962174 0.18973164]
21216.000000000004
0.13740844645254316




'''